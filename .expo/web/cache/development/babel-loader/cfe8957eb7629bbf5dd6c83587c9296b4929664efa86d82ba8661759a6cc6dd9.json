{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useNavigation } from '@react-navigation/native';\nimport Login from \"../Account/Login\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar UserAccount = function UserAccount() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoggedIn = _useState2[0],\n    setIsLoggedIn = _useState2[1];\n  var navigation = useNavigation();\n  var handleToggleMode = function handleToggleMode() {};\n  var handleLogin = function handleLogin() {\n    console.log('Login button pressed');\n    setIsLoggedIn(true);\n    navigation.navigate('Login');\n  };\n  var handleLogout = function handleLogout() {\n    console.log('Logout button pressed');\n    setIsLoggedIn(false);\n  };\n  var handleTermsAndConditions = function handleTermsAndConditions() {\n    navigation.navigate('TermsAndConditions');\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      style: styles.profileInfo\n    }), !isLoggedIn ? _jsx(TouchableOpacity, {\n      style: styles.loginButton,\n      onPress: handleLogin,\n      children: _jsx(Text, {\n        style: styles.loginButtonText,\n        children: \"Login\"\n      })\n    }) : _jsx(TouchableOpacity, {\n      style: styles.logoutButton,\n      onPress: handleLogout,\n      children: _jsx(Text, {\n        style: styles.logoutButtonText,\n        children: \"Logout\"\n      })\n    }), _jsx(TouchableOpacity, {\n      style: styles.option,\n      onPress: handleTermsAndConditions,\n      children: _jsx(Text, {\n        style: styles.optionText,\n        children: \"Terms and Conditions\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  profileInfo: {},\n  loginButton: {},\n  loginButtonText: {},\n  logoutButton: {},\n  logoutButtonText: {},\n  option: {},\n  optionText: {}\n});\nexport default UserAccount;","map":{"version":3,"names":["React","useState","View","Text","TouchableOpacity","StyleSheet","useNavigation","Login","jsx","_jsx","jsxs","_jsxs","UserAccount","_useState","_useState2","_slicedToArray","isLoggedIn","setIsLoggedIn","navigation","handleToggleMode","handleLogin","console","log","navigate","handleLogout","handleTermsAndConditions","style","styles","container","children","profileInfo","loginButton","onPress","loginButtonText","logoutButton","logoutButtonText","option","optionText","create","flex","justifyContent","alignItems"],"sources":["C:/Users/Bharath Kumar/Desktop/Astonish/React_Native/E-Commerce/Jtdeal/jtdeal/component/footer/UserAccount.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, TouchableOpacity, StyleSheet } from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native'; // Import useNavigation hook\r\nimport Login from '../Account/Login'; // Import the Login component\r\n\r\nconst UserAccount = () => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // State to track login status\r\n  const navigation = useNavigation(); // Initialize navigation\r\n\r\n  const handleToggleMode = () => {\r\n    // Toggle between 'sign-in' and 'sign-up' modes\r\n  };\r\n\r\n  const handleLogin = () => {\r\n    // Handle login action\r\n    console.log('Login button pressed');\r\n    setIsLoggedIn(true); // Set login status to true\r\n    navigation.navigate('Login'); // Navigate to the Login screen\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    // Handle logout action\r\n    console.log('Logout button pressed');\r\n    setIsLoggedIn(false); // Set login status to false\r\n  };\r\n\r\n  const handleTermsAndConditions = () => {\r\n    navigation.navigate('TermsAndConditions'); // Navigate to the TermsAndConditions screen\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {/* Profile information section */}\r\n      <View style={styles.profileInfo}>\r\n        {/* Profile information content */}\r\n      </View>\r\n\r\n      {/* Conditional rendering based on login status */}\r\n      {!isLoggedIn ? (\r\n        <TouchableOpacity style={styles.loginButton} onPress={handleLogin}>\r\n          <Text style={styles.loginButtonText}>Login</Text>\r\n        </TouchableOpacity>\r\n      ) : (\r\n        <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>\r\n          <Text style={styles.logoutButtonText}>Logout</Text>\r\n        </TouchableOpacity>\r\n      )}\r\n\r\n      {/* Other options */}\r\n      <TouchableOpacity style={styles.option} onPress={handleTermsAndConditions}>\r\n        <Text style={styles.optionText}>Terms and Conditions</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  profileInfo: {\r\n    // Styles for profile information\r\n  },\r\n  loginButton: {\r\n    // Styles for login button\r\n  },\r\n  loginButtonText: {\r\n    // Styles for login button text\r\n  },\r\n  logoutButton: {\r\n    // Styles for logout button\r\n  },\r\n  logoutButtonText: {\r\n    // Styles for logout button text\r\n  },\r\n  option: {\r\n    // Styles for other options\r\n  },\r\n  optionText: {\r\n    // Styles for option text\r\n  },\r\n});\r\n\r\nexport default UserAccount;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,UAAA;AAExC,SAASC,aAAa,QAAQ,0BAA0B;AACxD,OAAOC,KAAK;AAAyB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAErC,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;EACxB,IAAAC,SAAA,GAAoCZ,QAAQ,CAAC,KAAK,CAAC;IAAAa,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA5CG,UAAU,GAAAF,UAAA;IAAEG,aAAa,GAAAH,UAAA;EAChC,IAAMI,UAAU,GAAGZ,aAAa,CAAC,CAAC;EAElC,IAAMa,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAA,EAAS,CAE/B,CAAC;EAED,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;IAExBC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnCL,aAAa,CAAC,IAAI,CAAC;IACnBC,UAAU,CAACK,QAAQ,CAAC,OAAO,CAAC;EAC9B,CAAC;EAED,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;IAEzBH,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACpCL,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;EAED,IAAMQ,wBAAwB,GAAG,SAA3BA,wBAAwBA,CAAA,EAAS;IACrCP,UAAU,CAACK,QAAQ,CAAC,oBAAoB,CAAC;EAC3C,CAAC;EAED,OACEZ,KAAA,CAACT,IAAI;IAACwB,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAE5BpB,IAAA,CAACP,IAAI;MAACwB,KAAK,EAAEC,MAAM,CAACG;IAAY,CAE1B,CAAC,EAGN,CAACd,UAAU,GACVP,IAAA,CAACL,gBAAgB;MAACsB,KAAK,EAAEC,MAAM,CAACI,WAAY;MAACC,OAAO,EAAEZ,WAAY;MAAAS,QAAA,EAChEpB,IAAA,CAACN,IAAI;QAACuB,KAAK,EAAEC,MAAM,CAACM,eAAgB;QAAAJ,QAAA,EAAC;MAAK,CAAM;IAAC,CACjC,CAAC,GAEnBpB,IAAA,CAACL,gBAAgB;MAACsB,KAAK,EAAEC,MAAM,CAACO,YAAa;MAACF,OAAO,EAAER,YAAa;MAAAK,QAAA,EAClEpB,IAAA,CAACN,IAAI;QAACuB,KAAK,EAAEC,MAAM,CAACQ,gBAAiB;QAAAN,QAAA,EAAC;MAAM,CAAM;IAAC,CACnC,CACnB,EAGDpB,IAAA,CAACL,gBAAgB;MAACsB,KAAK,EAAEC,MAAM,CAACS,MAAO;MAACJ,OAAO,EAAEP,wBAAyB;MAAAI,QAAA,EACxEpB,IAAA,CAACN,IAAI;QAACuB,KAAK,EAAEC,MAAM,CAACU,UAAW;QAAAR,QAAA,EAAC;MAAoB,CAAM;IAAC,CAC3C,CAAC;EAAA,CACf,CAAC;AAEX,CAAC;AAED,IAAMF,MAAM,GAAGtB,UAAU,CAACiC,MAAM,CAAC;EAC/BV,SAAS,EAAE;IACTW,IAAI,EAAE,CAAC;IACPC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE;EACd,CAAC;EACDX,WAAW,EAAE,CAEb,CAAC;EACDC,WAAW,EAAE,CAEb,CAAC;EACDE,eAAe,EAAE,CAEjB,CAAC;EACDC,YAAY,EAAE,CAEd,CAAC;EACDC,gBAAgB,EAAE,CAElB,CAAC;EACDC,MAAM,EAAE,CAER,CAAC;EACDC,UAAU,EAAE,CAEZ;AACF,CAAC,CAAC;AAEF,eAAezB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}