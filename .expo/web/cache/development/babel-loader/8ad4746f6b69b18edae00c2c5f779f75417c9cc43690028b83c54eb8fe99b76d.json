{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Notification = function Notification() {\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    loading = _useState2[0],\n    setLoading = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    notifications = _useState4[0],\n    setNotifications = _useState4[1];\n  useEffect(function () {\n    fetchNotifications();\n  }, []);\n  var fetchNotifications = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        var response = yield fetch('https://your-backend-api.com/notifications');\n        var data = yield response.json();\n        setNotifications(data);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching notifications:', error);\n        setLoading(false);\n      }\n    });\n    return function fetchNotifications() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  if (loading) {\n    return _jsx(View, {\n      style: styles.loadingContainer,\n      children: _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"#0000ff\"\n      })\n    });\n  }\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Notifications\"\n    }), notifications.length === 0 ? _jsx(Text, {\n      children: \"No notifications at the moment.\"\n    }) : _jsx(FlatList, {\n      data: notifications,\n      keyExtractor: function keyExtractor(item) {\n        return item.id.toString();\n      },\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item;\n        return _jsx(View, {\n          style: styles.notificationItem,\n          children: _jsx(Text, {\n            children: item.message\n          })\n        });\n      }\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingHorizontal: 20,\n    paddingTop: 20\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 20\n  },\n  notificationItem: {\n    paddingVertical: 10,\n    borderBottomWidth: 1,\n    borderBottomColor: '#ccc'\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default Notification;","map":{"version":3,"names":["React","useState","useEffect","View","Text","StyleSheet","FlatList","ActivityIndicator","jsx","_jsx","jsxs","_jsxs","Notification","_useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","notifications","setNotifications","fetchNotifications","_ref","_asyncToGenerator","response","fetch","data","json","error","console","apply","arguments","style","styles","loadingContainer","children","size","color","container","title","length","keyExtractor","item","id","toString","renderItem","_ref2","notificationItem","message","create","flex","backgroundColor","paddingHorizontal","paddingTop","fontSize","fontWeight","marginBottom","paddingVertical","borderBottomWidth","borderBottomColor","justifyContent","alignItems"],"sources":["C:/Users/Bharath Kumar/Desktop/Astonish/React_Native/E-Commerce/Jtdeal/jtdeal/component/header/Notification.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { View, Text, StyleSheet, FlatList, ActivityIndicator } from 'react-native';\r\n\r\nconst Notification = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [notifications, setNotifications] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch notification data from your backend API\r\n    fetchNotifications();\r\n  }, []);\r\n\r\n  const fetchNotifications = async () => {\r\n    try {\r\n      const response = await fetch('https://your-backend-api.com/notifications');\r\n      const data = await response.json();\r\n      setNotifications(data);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Error fetching notifications:', error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <View style={styles.loadingContainer}>\r\n        <ActivityIndicator size=\"large\" color=\"#0000ff\" />\r\n      </View>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.title}>Notifications</Text>\r\n      {notifications.length === 0 ? (\r\n        <Text>No notifications at the moment.</Text>\r\n      ) : (\r\n        <FlatList\r\n          data={notifications}\r\n          keyExtractor={(item) => item.id.toString()}\r\n          renderItem={({ item }) => (\r\n            <View style={styles.notificationItem}>\r\n              <Text>{item.message}</Text>\r\n            </View>\r\n          )}\r\n        />\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    paddingHorizontal: 20,\r\n    paddingTop: 20,\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    fontWeight: 'bold',\r\n    marginBottom: 20,\r\n  },\r\n  notificationItem: {\r\n    paddingVertical: 10,\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: '#ccc',\r\n  },\r\n  loadingContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n});\r\n\r\nexport default Notification;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}